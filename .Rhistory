str(vv.df)
vv.df[1:5,1:5]
dim(kgen.df)
str(kgen.df)
kgen.df[1:5,1:5]
dim(exac.df)
str(exac.df)
exac.df[1:5,1:5]
gt.mx <- as.matrix(gt.df)
gq.mx <- as.matrix(gq.df)
dp.mx <- as.matrix(dp.df)
dim(gt.mx)
class(gt.mx)
gt.mx[1:5,1:5]
dim(gq.mx)
class(gq.mx)
gq.mx[1:5,1:5]
dim(dp.mx)
class(dp.mx)
dp.mx[1:5,1:5]
rm(gt.df, gq.df, dp.df)
# rownames
sum(rownames(gt.mx) != rownames(gq.mx))
sum(rownames(gt.mx) != rownames(dp.mx))
sum(rownames(gt.mx) != rownames(vv.df))
sum(rownames(gt.mx) != rownames(kgen.df))
sum(rownames(gt.mx) != rownames(exac.df))
# colnames
sum(colnames(gt.mx) != colnames(gq.mx))
sum(colnames(gt.mx) != colnames(dp.mx))
NA -> vv.df[vv.df$Existing_variation == "", "Existing_variation"] # no blanks in other fields
NA -> covar.df[covar.df == ""] # 1 case in chemo_hormone (row 84)
NA -> demographics.df[demographics.df == ""] # 2 cases in registry and one in chemo_hormone
NA -> BRCA1_BRCA2_PALB2_cases.df[BRCA1_BRCA2_PALB2_cases.df == ""] # 8 cases in notes
# No blanks in other tables
# Converst factors to vectors (to symplify comparisons)
str(phenotypes_update.df)
as.character(phenotypes_update.df$gwas_id) -> phenotypes_update.df$gwas_id
as.character(phenotypes_update.df$wes_id) -> phenotypes_update.df$wes_id
trimws(as.character(phenotypes_update.df$hist_cat)) -> phenotypes_update.df$hist_cat
trimws(as.character(phenotypes_update.df$chemo_cat)) -> phenotypes_update.df$chemo_cat
as.character(phenotypes_update.df$er1) -> phenotypes_update.df$er1
as.character(phenotypes_update.df$pr1) -> phenotypes_update.df$pr1
as.character(phenotypes_update.df$hormone) -> phenotypes_update.df$hormone
NA -> phenotypes_update.df[phenotypes_update.df$er1 == "missing", "er1"]
NA -> phenotypes_update.df[phenotypes_update.df$pr1 == "missing", "pr1"]
NA -> phenotypes_update.df[phenotypes_update.df$hormone == "missing", "hormone"]
as.numeric(phenotypes_update.df$er1) -> phenotypes_update.df$er1
as.numeric(phenotypes_update.df$pr1) -> phenotypes_update.df$pr1
as.numeric(phenotypes_update.df$hormone) -> phenotypes_update.df$hormone
str(phenotypes_update.df)
save.image(paste(interim_data_folder, "r01_read_and_clean_data_jan2017.RData", sep="/"))
ls()
sessionInfo()
Sys.time()
rm(list=ls())
# Time stamp
Sys.time()
# Folders
setwd("/scratch/medgen/scripts/wecare_stat_01.17/scripts")
interim_data_folder <- "/scratch/medgen/scripts/wecare_stat_01.17/interim_data"
# Thresholds for genotypes
min.gq <- 20
max.dp <- 500
# Variants call ratethreshold
min.call.rate <- 0.8
load(paste(interim_data_folder, "r01_read_and_clean_data_jan2017.RData", sep="/"))
dim(gt.mx)
class(gt.mx)
gt.mx[1:5,1:5]
dim(gq.mx)
class(gq.mx)
gq.mx[1:5,1:5]
dim(dp.mx)
class(dp.mx)
dp.mx[1:5,1:5]
dim(covar.df)
str(covar.df)
covar.df[1:5,1:5]
dim(samples.df)
str(samples.df)
samples.df[1:5,]
dim(demographics.df)
str(demographics.df)
demographics.df[1:5,1:5]
dim(phenotypes_update.df)
str(phenotypes_update.df)
phenotypes_update.df[1:5,1:5]
dim(BRCA1_BRCA2_PALB2_cases.df)
str(BRCA1_BRCA2_PALB2_cases.df)
BRCA1_BRCA2_PALB2_cases.df[1:5,1:5]
dim(vv.df)
str(vv.df)
vv.df[1:5,1:5]
dim(kgen.df)
str(kgen.df)
kgen.df[1:5,1:5]
dim(exac.df)
str(exac.df)
exac.df[1:5,1:5]
# Check consistence of rownames
sum(rownames(gt.mx) != rownames(gq.mx))
sum(rownames(gt.mx) != rownames(dp.mx))
sum(rownames(gt.mx) != rownames(vv.df))
sum(rownames(gt.mx) != rownames(kgen.df))
sum(rownames(gt.mx) != rownames(exac.df))
# Check consistence of colnames
sum(colnames(gt.mx) != colnames(gq.mx))
sum(colnames(gt.mx) != colnames(dp.mx))
# Fraction of NA genotypes before filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~4%
# Call rates per variant before filtering
x <- ncol(gt.mx)
y <- apply(gt.mx,1,function(z){1-sum(is.na(z))/x})
hist(y, breaks=50, xlab=NULL, main="Call rates per variant before genotypes filtering")
# Histogram of gq  before filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], breaks=50, main="Histogram of gq in non-NA genotypes (before filtering)", xlab=NULL)
# Histogram of dp before filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp in non-NA genotypes (before filtering)", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], breaks=2500, xlim=c(0,100), main="Histogram of dp in non-NA genotypes (before filtering, 0:100)", xlab=NULL)
rm(x,y)
# num of genotypes to be removed
sum(gq.mx < min.gq, na.rm=TRUE)
# Fraction of genotypes to be removed
sum(gq.mx < min.gq, na.rm=TRUE)/sum(!is.na(gq.mx)) # ~8%
# Apply filter (to gt only !)
NA -> gt.mx[ gq.mx < min.gq ]
# Clean up
rm(min.gq)
dim(gt.mx)
# Fraction of NA genotypes after filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~12%
# Call rates per variant after gq filtering
x <- ncol(gt.mx)
y <- apply(gt.mx, 1, function(z){1-sum(is.na(z))/x})
hist(y, xlab=NULL, main="Histogram of call rates per variant after gt filtering")
# Histogram of gq  after gq filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=50, main="Histogram of gq in non NA genotypes (after gq filtering)", xlab=NULL)
View(vv.df)
# Histogram of dp after gt filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp in non-NA genotypes (after gt filtering)", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=2500, main="Histogram of dp in non-NA genotypes (after gt filtering, 0:100)", xlab=NULL)
# Clean up
rm(x, y)
# num of genotypes to be removed
sum(dp.mx > max.dp, na.rm=TRUE)
# Fraction of genotypes to be removed (appr)
sum(dp.mx > max.dp, na.rm=TRUE)/sum(!is.na(gq.mx)) # <<1%
# Apply filter (to gt only !)
NA -> gt.mx[ dp.mx > max.dp ]
# Clean up
rm(max.dp)
dim(gt.mx)
# Fraction of NA genotypes after filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~12%
# Call rates per variant after gq filtering
x <- ncol(gt.mx)
y <- apply(gt.mx, 1, function(z){1-sum(is.na(z))/x})
hist(y, xlab=NULL, main="Call rates per variant after gt+dp filtering")
# Histogram of gq  after gq+dp filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=50, main="Histogram of gq in non-NA genotypes (after gq+dp filtering)", xlab=NULL)
# Histogram of dp after gt filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp after gt+dp filtering", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=500, main="Histogram of dp in non-NA genotypes (after gt+dp filtering, 0:100)", xlab=NULL)
# Clean up
rm(x, y)
# Estimate the proportion of variants to be removed
x <- ncol(gt.mx)
y <- apply(gt.mx, 1, function(z){1-sum(is.na(z))/x})
y[1:7]
var.retained <- y >= min.call.rate
sum(var.retained) # 283.651
1 - sum(var.retained)/nrow(gt.mx) # ~18%
# Remove variants with loaw call rates
gt.mx <- gt.mx[ var.retained, ]
dp.mx <- dp.mx[ var.retained, ]
gq.mx <- gq.mx[ var.retained, ]
vv.df <- vv.df[ var.retained, ]
kgen.df <- kgen.df[ var.retained, ]
exac.df <- exac.df[ var.retained, ]
# Clean-up
rm(min.call.rate, var.retained, x, y)
dim(gt.mx)
# Fraction of NA genotypes after filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~8%
# Call rates per variant after filtering
x <- ncol(gt.mx)
y <- apply(gt.mx,1,function(z){1-sum(is.na(z))/x})
hist(y, xlim=c(0,1), breaks=10, xlab=NULL, main="Call rates per variant after gq+dp+cr genotypes filtering")
# Histogram of gq  after filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=50, main="Histogram of gq in non-NA genotypes (after gq+dp+cr filtering)", xlab=NULL)
# Histogram of dp  after filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp in non-NA genotypes (after gq+dp+cr filtering)", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], breaks=500, xlim=c(0,100), main="Histogram of dp in non-NA genotypes (after gq+dp+cr filtering, 0:100)", xlab=NULL)
# Clean-up
rm(x, y)
mean(gq.mx, na.rm=TRUE)
mean(dp.mx, na.rm=TRUE)
rm(gq.mx, dp.mx)
dim(gt.mx)
class(gt.mx)
gt.mx[1:5,1:5]
dim(gq.mx)
library(SKAT)
power_480 <- Power_Logistic(
N.Sample.ALL = 480,
Case.Prop=0.5,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 20,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_3731 <- Power_Logistic(
N.Sample.ALL = 3731,
Case.Prop=0.41,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 20,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_480
power_3731
power_480 <- Power_Logistic(
N.Sample.ALL = 480,
Case.Prop=0.5,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_3731 <- Power_Logistic(
N.Sample.ALL = 3731,
Case.Prop=0.41,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_480
power_3731
power_480 <- Power_Logistic(
N.Sample.ALL = 480,
Case.Prop=0.5,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.05,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_3731 <- Power_Logistic(
N.Sample.ALL = 3731,
Case.Prop=0.41,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.05,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_480
power_3731
Power_Logistic
library(SKAT)
?Power_Logistic
library(plotly)
library(ggplot)
.libPath()
.libPaths()
.libPaths("/scratch/medgen/tools/r/R-3.3.2/lib64/R/library")
.libPaths()
library(ggplot)
library(plotly)
tryCatch_AL09Mar2017 <- function(expr)
{
C <- "succeeded"
# warning handler
w.handler <- function(w){
# Save warning w into a varaible W within calling environment
C <<- "warning"
invokeRestart("muffleWarning")
}
V <- withCallingHandlers(tryCatch(expr, error=function(e){print("error")}), warning=w.handler)
if(V=="error"){C <- V; V <- NA}
# Generate return value
list(value = V,
condition = C)
}
tryCatch_AL09Mar2017(1/2)
tryCatch_AL09Mar2017(1/0)
C <- "succeeded"
# warning handler
w.handler <- function(w){
# Save warning w into a varaible W within calling environment
C <<- "warning"
invokeRestart("muffleWarning")
}
withCallingHandlers(tryCatch(1/0, error=function(e){print("error")}), warning=w.handler)
withCallingHandlers(tryCatch(1/0), error=function(e){print("error")}, warning=w.handler)
withCallingHandlers(tryCatch(1/0), error={print("error")}, warning=w.handler)
withCallingHandlers(tryCatch(1/0), error={return("error")}, warning=w.handler)
withCallingHandlers(tryCatch(chisq.test(matrix(c(1,2,3,4,5,6), nrow=2))), error={print("error")}, warning=w.handler)
?invokeRestart
w.handler <- function(w){
# Save warning w into a varaible W within calling environment
C <<- "warning"
invokeRestart("muffleWarning")
}
e.handler <- function(e){
# Save warning w into a varaible W within calling environment
C <<- "error"
invokeRestart("muffleError")
}
withCallingHandlers(tryCatch(1/0)), error=e.handler, warning=w.handler)
withCallingHandlers(tryCatch(1/0), error=e.handler, warning=w.handler)
C <- "succeeded"
withCallingHandlers(tryCatch(1/0), error=e.handler, warning=w.handler)
withCallingHandlers(tryCatch(1/0), error=e.handler)
e.handler <- function(e){
C <<- "error"
#invokeRestart("muffleError")
}
withCallingHandlers(tryCatch(1/0), error=e.handler)
withCallingHandlers(tryCatch(1/0, error=e.handler)
withCallingHandlers(tryCatch(1/0, error=e.handler))
tryCatch(1/0, error=e.handler)
tryCatch(1/"A", error=e.handler)
C <- "succeeded"
W <- NA
E <- NA
# warning handler
w.handler <- function(w){
C <<- "warning"
W <<- w
invokeRestart("muffleWarning")
}
e.handler <- function(e){
C <<- "error"
E <<- e
return(NA)
}
V <- withCallingHandlers(tryCatch(1/"A"), error=e.handler, warning=w.handler)
C <- "succeeded"
W <- NA
E <- NA
V <- NA
# warning handler
w.handler <- function(w){
C <<- "warning"
W <<- w
invokeRestart("muffleWarning")
}
e.handler <- function(e){
C <<- "error"
E <<- e
V <<- NA
}
V <- withCallingHandlers(tryCatch(1/"A"), error=e.handler, warning=w.handler)
tryCatch_AL(1/2)
rm(list=ls())
tryCatch_AL <- function(expr)
{
C <- "succeeded"
W <- NA
E <- NA
V <- NA
# warning handler
w.handler <- function(w){
# Record information about warning
C <<- "warning"
W <<- w
# Execute expression again, suppressing warnings
invokeRestart("muffleWarning")
}
# Error handler
e.handler <- function(e){
# Record information about error
C <<- "error"
E <<- e
}
# Try to execute the expression
V <- withCallingHandlers(tryCatch(expr), error=e.handler, warning=w.handler)
# Generate return value
list(value = V,
condition = C,
warning = W,
error = E)
}
tryCatch_AL(1/2)
tryCatch_AL(1/"A")
tryCatch_AL(chisq.test(matrix(c(1,2,3,4,5,6), nrow=2)))
tryCatch_AL <- function(expr)
{
C <- "succeeded"
W <- NA
E <- NA
V <- NA
# warning handler
w.handler <- function(w){
# Record information about warning
C <<- "warning"
W <<- w
# Execute expression again, suppressing warnings
invokeRestart("muffleWarning")
}
# Error handler
e.handler <- function(e){
# Record information about error
C <<- "error"
E <<- e
}
# Try to execute the expression
V <- withCallingHandlers(tryCatch(expr, error=e.handler), warning=w.handler)
# Generate return value
list(value = V,
condition = C,
warning = W,
error = E)
}
tryCatch_AL(1/2)
tryCatch_AL(1/"A")
tryCatch_AL <- function(expr)
{
C <- "succeeded"
W <- NA
E <- NA
V <- NA
# warning handler
w.handler <- function(w){
# Record information about warning
C <<- "warning"
W <<- w
# Execute expression again, suppressing warnings
invokeRestart("muffleWarning")
}
# Error handler
e.handler <- function(e){
# Record information about error
C <<- "error"
E <<- e
return(NA)
}
# Try to execute the expression
V <- withCallingHandlers(tryCatch(expr, error=e.handler), warning=w.handler)
# Generate return value
list(value = V,
condition = C,
warning = W,
error = E)
}
tryCatch_AL(1/2)
tryCatch_AL(1/"A")
tryCatch_AL(chisq.test(matrix(c(1,2,3,4,5,6), nrow=2)))
rm(list=ls())
tryCatch_AL(1/0)
tryCatch_AL <- function(expr)
{
# Initial settings
C <- "succeeded"
W <- NA
E <- NA
V <- NA
# Warning handler
w.handler <- function(w){
# Record information about warning
C <<- "warning"
W <<- w
# Execute expression again, suppressing warnings
invokeRestart("muffleWarning")
}
# Error handler
e.handler <- function(e){
# Record information about error
C <<- "error"
E <<- e
# Do not
return(NA)
}
# Try to execute the expression
V <- withCallingHandlers(tryCatch(expr, error=e.handler), warning=w.handler)
# Generate return value
list(value = V,
condition = C,
warning = W,
error = E)
}
tryCatch_AL(1/2)
tryCatch_AL(1/"A")
tryCatch_AL(chisq.test(matrix(c(1,2,3,4,5,6), nrow=2)))
# Note that sometime errors are not generated when expected ...
tryCatch_AL(1/0)
rm(list=ls())
load(paste(results_folder, "r08a_2_SKAT_wecare_only_Mar2017.RData", sep="/"))
results_folder <- "/scratch/medgen/scripts/wecare_stat_03.17/results"
load(paste(results_folder, "r08a_2_SKAT_wecare_only_Mar2017.RData", sep="/"))
View(result.df)
summary(as.factor(result.df$note))
setwd("/scratch/medgen/scripts/wecare_stat_03.17/scripts")
# Time stamp
Sys.time()
# Folders
setwd("/scratch/medgen/scripts/wecare_stat_03.17/scripts")
source_data_folder <- "/scratch/medgen/scripts/wecare_stat_03.17/source_data"
interim_data_folder <- "/scratch/medgen/scripts/wecare_stat_03.17/interim_data"
load(paste(interim_data_folder, "r05c_calculate_egenvectors_wecare_nfe_kgen50_Mar2017.RData", sep="/"))
rm(list=ls())
# Time stamp
Sys.time()
# Folders
setwd("/scratch/medgen/scripts/wecare_stat_03.17/scripts")
source_data_folder <- "/scratch/medgen/scripts/wecare_stat_03.17/source_data"
interim_data_folder <- "/scratch/medgen/scripts/wecare_stat_03.17/interim_data"
# Libraries
library(ggplot2)
library(plotly)
load(paste(interim_data_folder, "r04a_filter_cases_and_variants_Mar2017.RData", sep="/"))
